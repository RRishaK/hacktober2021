//code chef solution
#include <iostream>
#include <math.h>
ong int
int main() {
	ll T, i, j; ll k;
	cin>>T;
	while(T--)
	{
	    cin>>k;
	    if(k==2) {cout<<3<<endl; continue;}
	    ll t=0;
	    k*=8;
	    k++;
	    k=(long long int)(ceil(sqrtl(k)));
	    k--;
                                                	   // t*=8;
                                                	   // t++;
                                                	   // t=ceil(sqrt(k));
                                                	   // t--;
                                                	    
	    cout<<max(k, t)<<endl;
	}
	return 0;
}

int MatrixChainOrder(int p[], int i, int j)
{
    if (i == j)
        return 0;
    int k;
    int min = INT_MAX;
    int count;
 
    // place parenthesis at different places
    // between first and last matrix, recursively
    // calculate count of multiplications for
    // each parenthesis placement and return the
    // minimum count
    for (k = i; k < j; k++)
    {
        count = MatrixChainOrder(p, i, k)
                + MatrixChainOrder(p, k + 1, j)
                + p[i - 1] * p[k] * p[j];
 
        if (count < min)
            min = count;
    }
 
    // Return minimum count
    return min;
}
 
// Driver Code
int main()
{
    int arr[] = { 1, 2, 3, 4, 3 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    cout << "Minimum number of multiplications is "
         << MatrixChainOrder(arr, 1, n - 1);
}
#include <iostream>
#include <vector>
#include <climits>
using namespace std;
 
// Function to find the most efficient way to multiply
// a given sequence of matrices
int matrixChainMultiplication(vector<int> const &dims, int i, int j)
{
    // base case: one matrix
    if (j <= i + 1) {
        return 0;
    }
 
    // stores the minimum number of scalar multiplications (i.e., cost)
    // needed to compute matrix `M[i+1] … M[j] = M[i…j]`
    int min = INT_MAX;
 
    // take the minimum over each possible position at which the
    // sequence of matrices can be split
 
    /*
        (M[i+1]) × (M[i+2]………………M[j])
        (M[i+1]M[i+2]) × (M[i+3…………M[j])
        …
        …
        (M[i+1]M[i+2]…………M[j-1]) × (M[j])
    */
 
    for (int k = i + 1; k <= j - 1; k++)
    {
        // recur for `M[i+1]…M[k]` to get an `i × k` matrix
        int cost = matrixChainMultiplication(dims, i, k);
 
        // recur for `M[k+1]…M[j]` to get an `k × j` matrix
        cost += matrixChainMultiplication(dims, k, j);
 
        // cost to multiply two `i × k` and `k × j` matrix
        cost +=    dims[i] * dims[k] * dims[j];
 
        if (cost < min) {
            min = cost;
        }
    }
 
    // return the minimum cost to multiply `M[j+1]…M[j]`
    return min;
}
 
// Matrix Chain Multiplication Problem
int main()
{
    // Matrix `M[i]` has dimension `dims[i-1] × dims[i]` for `i=1…n`
    // input is 10 × 30 matrix, 30 × 5 matrix, 5 × 60 matrix
    vector<int> dims = { 10, 30, 5, 60 };
    int n = dims.size();
 
    cout << "The minimum cost is " << matrixChainMultiplication(dims, 0, n - 1);
 
    return 0;
}
