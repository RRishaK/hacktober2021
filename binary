#include <bits/stdc++.h>
using namespace std;
 
//define array globally
const int N = 1e6 +4;
 
int a[N];
int n;//array size
 
//element to be searched in array
   int k;
 
bool check(int dig)
{
    //element at dig position in array
    int ele=a[dig];
 
    //if k is less than
    //element at dig position
    //then we need to bring our higher ending to dig
    //and then continue further
    if(k<=ele)
    {
        return 1;
    }
    else
    {
    return 0;
    }
}
void binsrch(int lo,int hi)
{
    while(lo<hi)
    {
        int mid=(lo+hi)/2;
        if(check(mid))
        {
            hi=mid;
        }
        else
        {
            lo=mid+1;
        }
    }
    //if a[lo] is k
    if(a[lo]==k)
        cout<<"Element found at index "<<lo;// 0 based indexing
    else
        cout<<"Element doesnt exist in array";//element was not in our array
 
}
 
 
int main()
{  
    cin>>n;
   for(int i=0; i<n; i++)
   {
    cin>>a[i];
   }
   cin>>k;
 
   //it is being given array is sorted
   //if not then we have to sort it
 
   //minimum possible point where our k can be is starting index
   //so lo=0
   //also k cannot be outside of array so end point
   //hi=n
 
   binsrch(0,n);
 
    return 0;
}
 

Iterative implementation of Binary Search 





// C++ program to implement recursive Binary Search
#include <bits/stdc++.h>
using namespace std;
 
// A iterative binary search function. It returns
// location of x in given array arr[l..r] if present,
// otherwise -1
int binarySearch(int arr[], int l, int r, int x)
{
    while (l <= r) {
        int m = l + (r - l) / 2;
 
        // Check if x is present at mid
        if (arr[m] == x)
            return m;
 
        // If x greater, ignore left half
        if (arr[m] < x)
            l = m + 1;
 
        // If x is smaller, ignore right half
        else
            r = m - 1;
    }
 
    // if we reach here, then element was
    // not present
    return -1;
}
 
int main(void)
{
    int arr[] = { 2, 3, 4, 10, 40 };
    int x = 10;
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = binarySearch(arr, 0, n - 1, x);
    (result == -1) ? cout << "Element is not present in array"
                   : cout << "Element is present at index " << result;
    return 0;
}
